// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// ReApiRoleDao is the manager for logic model data accessing and custom defined data operations functions management.
type ReApiRoleDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns ReApiRoleColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// ReApiRoleColumns defines and stores column names for table re_api_role.
type ReApiRoleColumns struct {
	ApiRoleId  string //           
    RoleId     string //           
    ApiId      string //           
    CreatedAt  string // 创建时间  
    UpdatedAt  string // 修改时间  
    DeletedAt  string // 删除标记
}

//  reApiRoleColumns holds the columns for table re_api_role.
var reApiRoleColumns = ReApiRoleColumns{
	ApiRoleId: "api_role_id",  
            RoleId:    "role_id",      
            ApiId:     "api_id",       
            CreatedAt: "created_at",   
            UpdatedAt: "updated_at",   
            DeletedAt: "deleted_at",
}

// NewReApiRoleDao creates and returns a new DAO object for table data access.
func NewReApiRoleDao() *ReApiRoleDao {
	return &ReApiRoleDao{
		Group:   "default",
		Table:   "re_api_role",
		Columns: reApiRoleColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ReApiRoleDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ReApiRoleDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ReApiRoleDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}