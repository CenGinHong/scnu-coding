// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// CheckinDetailDao is the manager for logic model data accessing and custom defined data operations functions management.
type CheckinDetailDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns CheckinDetailColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// CheckinDetailColumns defines and stores column names for table checkin_detail.
type CheckinDetailColumns struct {
	CheckinDetailId  string // id          
    IsCheckin        string // 是否有签到  
    UserId           string // 用户id      
    CheckinRecordId  string // 签到记录id  
    CreatedAt        string // 创建时间    
    UpdatedAt        string // 更新时间
}

//  checkinDetailColumns holds the columns for table checkin_detail.
var checkinDetailColumns = CheckinDetailColumns{
	CheckinDetailId: "checkin_detail_id",  
            IsCheckin:       "is_checkin",         
            UserId:          "user_id",            
            CheckinRecordId: "checkin_record_id",  
            CreatedAt:       "created_at",         
            UpdatedAt:       "updated_at",
}

// NewCheckinDetailDao creates and returns a new DAO object for table data access.
func NewCheckinDetailDao() *CheckinDetailDao {
	return &CheckinDetailDao{
		Group:   "default",
		Table:   "checkin_detail",
		Columns: checkinDetailColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CheckinDetailDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CheckinDetailDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CheckinDetailDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}