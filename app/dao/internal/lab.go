// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// LabDao is the manager for logic model data accessing and custom defined data operations functions management.
type LabDao struct {
	Table   string     // Table is the underlying table name of the DAO.
	Group   string     // Group is the database configuration group name of current DAO.
	Columns LabColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// LabColumns defines and stores column names for table lab.
type LabColumns struct {
	LabId         string // 主键
	CourseId      string // 该实验隶属的课程
	Type          string // 枚举，练习，作业，考试
	Title         string // 标题
	Content       string // 实验内容描述
	CreatedAt     string // 创建时间
	UpdatedAt     string // 修改时间
	AttachmentSrc string // 实验附件url
	Deadline      string // 截止时间
}

//  labColumns holds the columns for table lab.
var labColumns = LabColumns{
	LabId:         "lab_id",
	CourseId:      "course_id",
	Type:          "type",
	Title:         "title",
	Content:       "content",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	AttachmentSrc: "attachment_src",
	Deadline:      "deadline",
}

// NewLabDao creates and returns a new DAO object for table data access.
func NewLabDao() *LabDao {
	return &LabDao{
		Group:   "default",
		Table:   "lab",
		Columns: labColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *LabDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *LabDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *LabDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
