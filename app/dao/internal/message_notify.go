// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// MessageNotifyDao is the manager for logic model data accessing and custom defined data operations functions management.
type MessageNotifyDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns MessageNotifyColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// MessageNotifyColumns defines and stores column names for table message_notify.
type MessageNotifyColumns struct {
	MessageId   string // id        
    ReceiverId  string // 接收者id  
    SenderId    string // 发送者id  
    Content     string // 消息内容  
    CreatedAt   string // 创建时间  
    UpdatedAt   string // 更新时间
}

//  messageNotifyColumns holds the columns for table message_notify.
var messageNotifyColumns = MessageNotifyColumns{
	MessageId:  "message_id",   
            ReceiverId: "receiver_id",  
            SenderId:   "sender_id",    
            Content:    "content",      
            CreatedAt:  "created_at",   
            UpdatedAt:  "updated_at",
}

// NewMessageNotifyDao creates and returns a new DAO object for table data access.
func NewMessageNotifyDao() *MessageNotifyDao {
	return &MessageNotifyDao{
		Group:   "default",
		Table:   "message_notify",
		Columns: messageNotifyColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *MessageNotifyDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *MessageNotifyDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *MessageNotifyDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}