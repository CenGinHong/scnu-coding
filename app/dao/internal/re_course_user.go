// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// ReCourseUserDao is the manager for logic model data accessing and custom defined data operations functions management.
type ReCourseUserDao struct {
	Table   string              // Table is the underlying table name of the DAO.
	Group   string              // Group is the database configuration group name of current DAO.
	Columns ReCourseUserColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// ReCourseUserColumns defines and stores column names for table re_course_user.
type ReCourseUserColumns struct {
	ReCourseUserId string // 主键
	UserId         string // 用户id
	CourseId       string // 课程id
	UpdatedAt      string // 更新时间
	CreatedAt      string // 创建时间
}

//  reCourseUserColumns holds the columns for table re_course_user.
var reCourseUserColumns = ReCourseUserColumns{
	ReCourseUserId: "re_course_user_id",
	UserId:         "user_id",
	CourseId:       "course_id",
	UpdatedAt:      "updated_at",
	CreatedAt:      "created_at",
}

// NewReCourseUserDao creates and returns a new DAO object for table data access.
func NewReCourseUserDao() *ReCourseUserDao {
	return &ReCourseUserDao{
		Group:   "default",
		Table:   "re_course_user",
		Columns: reCourseUserColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ReCourseUserDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ReCourseUserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ReCourseUserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
