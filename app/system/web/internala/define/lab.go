// ==========================================================================
// This is auto-generated by gf cli tool. Fill this file as you wish.
// ==========================================================================

package define

import (
	"github.com/gogf/gf/os/gtime"
	"github.com/gogf/gf/util/gmeta"
)

type InsertLabReq struct {
	CourseId      int         // 该实验隶属的课程
	Title         string      // 标题
	Content       string      // 实验内容简介
	AttachmentSrc string      // 实验附件url
	DeadLine      *gtime.Time // 截止时间
}

type LabDetailResp struct {
	gmeta.Meta   `orm:"table:lab"`
	LabId        int `orm:"lab_id" json:"labId"` // 主键
	CourseId     int `orm:"course_id" json:"-"`  // 该实验隶属的课程
	CourseDetail *struct {
		gmeta.Meta `orm:"table:course"`
		CourseId   int    `orm:"course_id" json:"courseId"`     // 该实验隶属的课程
		CourseName string `orm:"course_name" json:"courseName"` // 实验名称
	} `orm:"with:course_id" json:"courseDetail"` //这里注意不要都with
	Title           string `orm:"title" json:"title"`     // 实验标题
	Content         string `orm:"content" json:"content"` // 实验内容描述
	LabSubmitDetail *struct {
		gmeta.Meta       `orm:"table:lab_submit"`
		LabId            int    `orm:"lab_id" json:"-"`                            // 主键
		LabSubmitId      int    `orm:"lab_submit_id" json:"labSubmitId"`           //
		Report           string `orm:"report" json:"report"`                       // 实验报告(md)/存放实验报告pdf的url
		IsFinish         bool   `orm:"is_finish" json:"isFinish"`                  // 是否完成
		Score            int    `orm:"score" json:"score"`                         // 成绩,要用指针
		LabSubmitComment string `orm:"lab_submit_comment" json:"labSubmitComment"` // 教师对该实验的评论
	} `orm:"with:lab_id" json:"labSubmitDetail"`
	AttachmentSrc string      `orm:"attachment_src" json:"attachmentSrc"` // 实验附件url
	Type          int         `orm:"type"           json:"type"`          // 枚举，练习，作业，考试
	Deadline      *gtime.Time `orm:"deadline" json:"deadline"`            // 截止时间
	CreatedAt     *gtime.Time `orm:"created_at" json:"createdAt"`         // 创建时间
	UpdatedAt     *gtime.Time `orm:"updated_at" json:"updatedAt"`         // 修改时间
}

type UpdateLabReq struct {
	LabId         int     `orm:"lab_id,primary"` // 主键
	Title         string  `orm:"title"`          // 标题
	Content       string  `orm:"content"`        // 实验内容描述
	AttachmentSrc *string `orm:"attachment_src"` // 实验附件url
	Deadline      string  `orm:"deadline"`       // 截止时间
}

type ListOneStudentScore struct {
	LabId           int    `orm:"lab_id,primary" json:"-"` // 主键
	Title           string `orm:"title" json:"title"`      // 标题
	LabSubmitDetail struct {
		LabId int `orm:"lab_id"  json:"-"`     // lab id
		Score int `orm:"score"   json:"score"` // 分数
	} `json:"labSubmitDetail"`
}

//type demo struct {
//	userId int
//	detail struct {
//		score int
//	}
//}
//
//例如一个这样的结构分别在两张表，一张是用户信息,一张是成绩，通过userId关联。
//你可以用join就能够对score排序然后page。
//如果用两次查的话，我只能对userId排序然后page.因为score是依赖于userId的。
